---
title: Lab 1
subtitle: 
author: Daniel Anderson
date: '2022-03-03'
assigned: '2021-04-04'
due: '2021-04-11'
slug: lab-1
categories:
  - Assignments
tags:
  - Labs
  - Assignments
---


```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

The purpose of this lab is to get you working with base R looping functions
while also being careful about data types. Your are welcome to work with a
partner or in a small group of 3-4 people.

## Data structures
```{r lm, eval = FALSE}
set.seed(123) # Set random number generation

m <- lm(mpg ~ hp + cyl + drat, mtcars)

l <- list(a = list(m = matrix(1:12, ncol = 3),
              	   v = 1:7),
          b = data.frame(student = 1:15,
                         score = rnorm(15, 100, 10)))
```

Run the above code

1. From the model results:
	* Extract the qr tolerance (`tol`).
	* Extract the term labels from the model.
		+ hint: Use `str` to inspect the list. This one is tricky and involves
		pulling an attribute from an attribute.

2. From `l`
	+ Use at least two different methods to extract `m`.
	+ Extract the third column of `m`. Maintain the dimensions (matrix structure).
	+ Extract the score for student 7 in the data frame.


```{r answers-data-structures, include = FALSE}
# 1
m <- lm(mpg ~ hp + cyl + drat, mtcars)
str(m)

## A
m$qr$tol # qr tolerance

## B
term_attributes <- attr(m$model, "terms")
attr(term_attributes, "term.labels")

# 2
set.seed(123)
l <- list(a = list(m = matrix(1:12, ncol = 3),
              	 	 v = 1:7),
		  		b = data.frame(student = 1:15,
			             			 score = rnorm(15, 100, 10)))

## A
### Method 1
l$a$m

### Method 2
l[[1]][[1]]

l[["a"]][[1]]
l[["a"]][["m"]]

## B
l$a$m[ ,3, drop = FALSE]

# as opposed to:
#l$a$m[ ,3]

## C
### Method 1
l$b[7, ]

### Method 2
l[["b"]][ l[["b"]]$student == 7, ]
l[["b"]][7, ]

stu_ids <- l[["b"]]$student # these two lines are
l[["b"]][stu_ids == 7, ]    # equivalent to line 91
```

## Loops

3. Read in the `insurance_coverage.csv` file, which is in the data folder in the repo. Split the data file by `"age_bucket"` and `"sex_name"`.

4. Use a `for` loop to calculate the mean health care population (`hc_pop`) for each `"age_bucket"/"sex_name"` combination.

5. Replicate this calculation with `lapply`, `sapply`, and `vapply`

6. Produce separate plots showing the change in `hc_pop` from 2014 to 2015 for each `"age_bucket"/"sex_name"` combination (with a single loop). Set the `hc_pop` axis so the limits equal the overall minimum and maximum values for `hc_pop`.

7. Use a `for` loop to save the plots to a folder on your computer


```{r answers-loops, include = FALSE}
# 3
file <- fs::dir_ls(here::here("data"), regexp = "insur")
insurance <- readr::read_csv(file)
by_age_sex <- split(
  insurance,
  list(insurance$age_bucket, insurance$sex_name)
)

# 4
mean_hc_pop1 <- rep(NA, length(by_age_sex))

# vector("list", length(by_age_sex)) # create an empty list instead of an atomic vector

for(i in seq_along(by_age_sex)) {
	mean_hc_pop1[i] <- mean(
	  by_age_sex[[i]]$hc_pop, 
	  na.rm = TRUE
  )
}

# mean_hc_pop1[1] <- mean(by_age_sex[[1]]$hc_pop, na.rm = TRUE)
# mean_hc_pop1[2] <- mean(by_age_sex[[2]]$hc_pop, na.rm = TRUE)
# mean_hc_pop1[3] <- mean(by_age_sex[[3]]$hc_pop, na.rm = TRUE)
# mean_hc_pop1[4] <- mean(by_age_sex[[4]]$hc_pop, na.rm = TRUE)
# mean_hc_pop1[5] <- mean(by_age_sex[[5]]$hc_pop, na.rm = TRUE)

# 5
## lapply
mean_hc_pop2 <- lapply(by_age_sex, function(df) mean(df$hc_pop, na.rm = TRUE))

## sapply
mean_hc_pop3 <- sapply(by_age_sex, function(df) mean(df$hc_pop, na.rm = TRUE))

## vapply
mean_hc_pop4 <- vapply(by_age_sex, function(df) mean(df$hc_pop, na.rm = TRUE),
                       FUN.VALUE = double(1))

# 6
library(ggplot2)
theme_set(theme_minimal())

y_axis_range <- range(insurance$hc_pop)

plots <- lapply(by_age_sex, function(df) {
	ggplot(df, aes(year, hc_pop)) +
    geom_line(color = "gray60") +
    geom_point() +
    scale_x_continuous(breaks = c(2014, 2015)) +
    scale_y_continuous(limits = y_axis_range)
})


# extend this so it has a title on each
titles <- names(by_age_sex)
titles <- gsub("insurance_", "", titles)
titles <- gsub("\\.", " ", titles)
titles <- gsub("(\\d)to", "\\1 to ", titles)
titles <- gsub("  ", " ", titles)

plots2 <- vector("list", length(by_age_sex))

for(i in seq_along(by_age_sex)) {
	plots2[[i]] <- 
  ggplot(by_age_sex[[i]], aes(year, hc_pop)) +
    geom_line(color = "gray60") +
    geom_point() +
    scale_x_continuous(breaks = c(2014, 2015)) +
    scale_y_continuous(limits = y_axis_range) +
    labs(title = titles[i])
}
```

```{r seven, eval = FALSE, include = FALSE}
# 7
dir.create(here::here("plots"))

filenames <- here::here(
  "plots",
  paste0(gsub("\\.", "-", names(by_age_sex)), ".png")
)

for(i in seq_along(plots)) {
	ggsave(filenames[i],
	       plots[[i]],
	       device = "png",
	       width = 6.5,
	       height = 8)
}
# 
# ggsave(filenames[1],
#        plots[[1]],
#        device = "png",
#        width = 6.5,
#        height = 8)
# 
# ggsave(filenames[2],
#        plots[[2]],
#        device = "png",
#        width = 6.5,
#        height = 8)
# 
# 
# ggsave(filenames[3],
#        plots[[3]],
#        device = "png",
#        width = 6.5,
#        height = 8)
```

